I"ö6<p>Last week we talked about <a href="/2019/01/17/using-protocols-as-composable-extensions/">extracting reusable code samples from ViewControllers into Protocols and Protocol extensions</a>. Today I want to show you another nice use case of protocols while maintaining the state of ViewControllers.</p>

<p>Assume that we have a screen for presenting the list of user watched shows â€” our app downloads it from the web service like Trakt. We can describe the state of ViewController within three variables:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">HistoryViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">loading</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="nf">renderLoading</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">shows</span><span class="p">:</span> <span class="p">[</span><span class="kt">Show</span><span class="p">]?</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="nf">renderShows</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">Error</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="nf">renderError</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>loading indicates whether the ViewController loading the data or already finished the job.</li>
  <li>shows variable stores the actual history of watched TV shows.</li>
  <li>error property reports whether the request ended with an error.</li>
</ol>

<p>Here is fetch method, which used to request data from Trakt web service:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">fetch</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">loading</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="n">historyService</span><span class="o">.</span><span class="n">fetch</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">result</span> <span class="k">in</span>
            <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">loading</span> <span class="o">=</span> <span class="kc">false</span>
            <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
            <span class="k">case</span> <span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="k">let</span> <span class="nv">shows</span><span class="p">):</span> <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">shows</span> <span class="o">=</span> <span class="n">shows</span>
            <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span> <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">error</span> <span class="o">=</span> <span class="n">error</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>Before starting our request to Trakt web service, we set loading to true, which calls renderLoading() method. After that, we initiate the API request to fetch the history of watched TV shows. In the completion handler, we set shows or error variables accordingly to the result of the request. At first glance, it should work pretty well, but here we have a couple of downsides.</p>

<ol>
  <li>We have to reset loading, error, shows variables on every request to avoid an invalid state. For example, in case of the first request fails and user retries it with the successful request, we still have value in the error property.</li>
  <li>We want an exclusive state, at any point, we need only one state of the screen: error or loading or shows. Right now we introduce more state variations than we have, and this can leads to ambiguous situations.</li>
</ol>

<h4 id="enums">Enums</h4>
<p>We want the exclusive state, and this is about enums. Enums give the opportunity to have only one case at any point in time. Letâ€™s refactor our code with enum.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">State</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">loading</span>
    <span class="k">case</span> <span class="nf">error</span><span class="p">(</span><span class="kt">Error</span><span class="p">)</span>
    <span class="k">case</span> <span class="nf">loaded</span><span class="p">([</span><span class="kt">Show</span><span class="p">])</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">HistoryViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">state</span><span class="p">:</span> <span class="kt">State</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="nf">render</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">HistoryViewController</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="n">state</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">loading</span><span class="p">:</span> <span class="c1">// render loading</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">error</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span> <span class="c1">// render error</span>
        <span class="k">case</span> <span class="nf">loaded</span><span class="p">(</span><span class="k">let</span> <span class="nv">shows</span><span class="p">):</span> <span class="c1">// render shows</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here we declare State enum which exclusively describes our state cases. As soon as state variable changes, it calls the render method. Inside the render method, we switch state to display it. Another positive change here is clean access to screen state. We donâ€™t need to check all the three variables to understand whatâ€™s happening on the screen right now.</p>

<h4 id="protocols-with-associated-types">Protocols with associated types</h4>
<p>We already made nice refactoring, but it is very bounded to current screen, which presents the list of the shows. Letâ€™s add a generic constraint to State enum, to make it more usable across the app screens, which also have loading and error states, but present other data entities.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">State</span><span class="o">&lt;</span><span class="kt">Data</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">loading</span>
    <span class="k">case</span> <span class="nf">loaded</span><span class="p">(</span><span class="kt">Data</span><span class="p">)</span>
    <span class="k">case</span> <span class="nf">error</span><span class="p">(</span><span class="kt">Error</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Letâ€™s go beyond and extract state handling into a generic protocol with protocol extension, which any ViewController can adapt to add this logic.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">StatePresentable</span><span class="p">:</span> <span class="kt">ActivityPresentable</span><span class="p">,</span> <span class="kt">ErrorPresentable</span> <span class="p">{</span>
    <span class="kd">associatedtype</span> <span class="kt">Data</span>

    <span class="k">var</span> <span class="nv">state</span><span class="p">:</span> <span class="kt">State</span><span class="o">&lt;</span><span class="kt">Data</span><span class="o">&gt;</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">render</span><span class="p">()</span>
    <span class="kd">func</span> <span class="nf">render</span><span class="p">(</span><span class="n">_</span> <span class="nv">data</span><span class="p">:</span> <span class="kt">Data</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">StatePresentable</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="n">state</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">loading</span><span class="p">:</span>
            <span class="nf">setActivityStatus</span><span class="p">(</span><span class="o">.</span><span class="n">visible</span><span class="p">)</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">error</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
            <span class="nf">setActivityStatus</span><span class="p">(</span><span class="o">.</span><span class="n">hidden</span><span class="p">)</span>
            <span class="nf">present</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">loaded</span><span class="p">(</span><span class="k">let</span> <span class="nv">data</span><span class="p">):</span>
            <span class="nf">setActivityStatus</span><span class="p">(</span><span class="o">.</span><span class="n">hidden</span><span class="p">)</span>
            <span class="nf">render</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here we have StatePresentable protocol which extends from Activity and Error Presentable protocols. We described these two protocols in the previous <a href="/2019/01/17/using-protocols-as-composable-extensions/">post</a>.
StatePresentable protocol has associated type Data, which we use as generic constraint for State enum, to make it usable for any type of data. We also added the default implementation for render method which handles state changes.</p>

<p>Here is the usage example of StatePresentable protocol.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">HistoryViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">state</span><span class="p">:</span> <span class="kt">State</span><span class="o">&lt;</span><span class="p">[</span><span class="kt">Show</span><span class="p">]</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="nf">render</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">HistoryViewController</span><span class="p">:</span> <span class="kt">StatePresentable</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">render</span><span class="p">(</span><span class="n">_</span> <span class="nv">data</span><span class="p">:</span> <span class="p">[</span><span class="kt">Show</span><span class="p">])</span> <span class="p">{</span>
        <span class="c1">// render your data here</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>All we need is to conform StatePresentable protocol, add the didSet observer for state property and implement render method, where we add data presenting logic for the actual screen.</p>

<h4 id="conclusion">Conclusion</h4>
<p>Protocol with associated types can be robust by enabling the power of generic constraints and making codebase more reusable. I really suggest to read great <a href="https://www.natashatherobot.com/swift-what-are-protocols-with-associated-types/">post</a> by NatashaTheRobot about Protocols with associated types.</p>

<p>Feel free to follow me on <a href="https://twitter.com/mecid">Twitter</a> and ask your questions related to this post. Thanks for reading and see you next week!</p>
:ET